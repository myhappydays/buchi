{
  "version": "0.2.0",
  "activities": [
    {
      "timestamp": "2025-07-15T09:00:00Z",
      "description": "Go 기반 기존 프로젝트 분석 및 시리얼 통신 리팩토링 결정 (Python FastAPI로 분리)",
      "details": "Go의 HTTP 서버와 시리얼 통신(go.bug.st/serial) 기능 파악. time.sleep() 대신 타임아웃 기반 논블로킹 읽기 구현 결정."
    },
    {
      "timestamp": "2025-07-15T09:30:00Z",
      "description": "Python 시리얼 서버 초기 구현",
      "details": "serial_server 디렉토리 생성, requirements.txt, serial_manager.py, main_serial.py 파일 생성 및 초기 코드 작성."
    },
    {
      "timestamp": "2025-07-15T10:00:00Z",
      "description": "FastAPI DeprecationWarning (on_event) 수정",
      "details": "main_serial.py에서 @app.on_event를 lifespan 이벤트 핸들러로 변경하여 경고 해결."
    },
    {
      "timestamp": "2025-07-15T10:30:00Z",
      "description": "serial_manager.py의 포트 연결 로직 수정",
      "details": "find_and_open_port 함수에서 with 문 사용으로 인한 포트 자동 닫힘 문제 해결. 포트가 열린 상태를 유지하도록 수정."
    },
    {
      "timestamp": "2025-07-15T11:00:00Z",
      "description": "BUCHI 장치 시뮬레이터 (serial_test.py) 구현 및 테스트 스크립트 (port_test.py) 생성",
      "details": "가상 COM 포트를 사용하여 BUCHI:WHO 요청에 응답하는 시뮬레이터 구현. 특정 포트에 BUCHI:WHO를 보내 응답을 확인하는 port_test.py 작성 및 성공 확인."
    },
    {
      "timestamp": "2025-07-15T12:00:00Z",
      "description": "FastAPI 엔드포인트 통신 디버깅 및 수정",
      "details": "write-url 엔드포인트의 POST 요청 문제 (405 Method Not Allowed) 발생. request: dict 파라미터 문제로 판단, GET 메서드와 쿼리 파라미터로 변경하여 해결. serial_manager.py에 디버그 로그 추가하여 시리얼 응답 확인."
    },
    {
      "timestamp": "2025-07-15T13:00:00Z",
      "description": "FastAPI 엔드포인트 (write-url, validate-token) 성공적인 통신 확인",
      "details": "write-url을 통해 토큰이 포함된 URL을 받아오고, validate-token을 통해 해당 토큰이 유효함을 확인."
    },
    {
      "timestamp": "2025-07-15T14:00:00Z",
      "description": "서버 시작 지연 문제 논의 및 개선 방안 모색",
      "details": "serial_manager.py의 time.sleep(2)로 인한 지연 확인. 아두이노 리셋 특성 논의. 하드웨어 수정 또는 서버 상시 실행 방안 제안."
    },
    {
      "timestamp": "2025-07-15T15:00:00Z",
      "description": "Python 서버 상시 실행 및 포트 변경 논의",
      "details": "서버 상시 실행 시의 장단점 및 잠재적 문제점 분석. FastAPI 서버 포트를 28245로 변경. Windows에서 NSSM을 사용한 서비스 등록 및 자동 재시작 방안 제안."
    },
    {
      "timestamp": "2025-07-15T16:00:00Z",
      "description": "Go에서 Python 서버 실행 및 배포 전략 논의",
      "details": "Go의 os/exec를 사용하여 Python 서버를 실행하고 관리하는 방법 논의. PyInstaller, Inno Setup/NSIS를 활용한 통합 배포 전략 논의."
    },
    {
      "timestamp": "2025-07-15T17:00:00Z",
      "description": "프로젝트 문서 (buchi.md) 작성",
      "details": "프로젝트 개요, 구성, 작동 방식, 기술 스택을 포함하는 마크다운 문서 생성."
    }
  ]
}